---
title: "Mitch_Research"
format: html
editor: visual
---



```{r}
add_text <- function(plt, x, y, text, size, color){
  
  plt %>% 
    plotly::layout(
      annotations = list(
      list(
        x = x, y = y, 
        text = text, 
        showarrow = FALSE, 
        xanchor = "center", 
        yanchor = "bottom",
        font = list(size = size, color = color),
        textangle = -90
      )
    )
  )
    
}
```

```{r}
library(tidyverse)


bit <- tidyquant::tq_get(
  'BTC-USD',
  get = 'stock.prices',
  from = '2014-09-17'
) %>% 
  tidyr::drop_na()


candle <- bit %>% plotly::plot_ly(
  x = ~date,
  type = 'candlestick',
  open = ~open,
  high = ~high,
  low = ~low,
  close = ~close
) %>% 
  plotly::layout(
    title = "BTC since 2014",
    shapes = list(
      list(type = 'line', x0 = as.Date('2017-12-16'), x1 = as.Date('2017-12-16'), y0 = 0, y1 = 120000, line = list(color = 'grey', dash = 'dash')),
      list(type = "rect", x0 = as.Date('2020-12-09'), x1 = as.Date('2022-06-09'), y0 = 0, y1 = 120000, fillcolor = "rgba(255, 0, 0, 0.2)",
           line = list(color = 'red', dash = 'dash')),
      list(type = "rect", x0 = as.Date('2023-01-10'), x1 = max(bit$date), y0 = 0, y1 = 120000, fillcolor = "rgba(0, 255, 0, 0.2).",
           line = list(color = 'green', dash = 'dash'))
    )) %>% 
  add_text(., as.Date('2017-11-05'), 60000, "First Peak. Why?", 12, 'grey') %>% 
  add_text(., as.Date('2020-10-05'), 60000, "Huge Vol. Why?", 12, 'red') %>% 
  add_text(., as.Date('2022-12-05'), 60000, "Huge Bull Run. Why?", 12, 'green')
  

candle

```


```{r}

bit %>% 
  dplyr::mutate(check = open == lag(close))


rets <- bit %>% 
  dplyr::mutate(
    intraday = log(close / open),
    closeclose = log(close / lag(close)),
    overnight = log(open / lag(close))
  ) %>% 
  tidyr::drop_na()

rets %>% 
  dplyr::select(date, intraday,  closeclose, overnight) %>% 
  tidyr::pivot_longer(-date, names_to = 'series', values_to = 'value') %>% 
  plotly::plot_ly(y = ~value, x = ~series, color = ~series, type = "box") %>%
  plotly::layout(title = "Daily Log Returns by type",
         xaxis = list(title = ""),
         yaxis = list(title = "Log Returns", tickformat = '.1%'))
```


```{r stl}
library(zoo)


monthly <- bit %>%
  tidyquant::tq_transmute(select = close, mutate_fun = periodReturn, period = "monthly", type = "log", col_rename = 'BITUSD') 


components <- monthly %>% 
  dplyr::mutate(freq = tsibble::yearmonth(date)) %>% 
  dplyr::select(-date) %>% 
  tsibble::as_tsibble(index = freq) %>% 
  fabletools::model(
    feasts::STL(formula = BITUSD ~ season(window = 13))
  ) %>% 
  fabletools::components()

components %>% autoplot()

```

```{r, diffusion properties}

stats::qqnorm(monthly$BITUSD, main = "Log Returns - Normal Q-Q Plot")
stats::qqline(monthly$BITUSD, col = "red") # Pass vis test 1 for normal

monthly %>% 
  ggplot(aes(x = BITUSD)) + geom_histogram(aes(y = after_stat(density))) # not going to have enough dat points will need further test i.e JB

tseries::jarque.bera.test(monthly$BITUSD) # high p fail to reject - monthly log is normal

stats::qqnorm(rets$closeclose, main = "Log Returns - Normal Q-Q Plot")
stats::qqline(rets$closeclose, col = "red")

garchdat <- rets %>% dplyr::select(date, closeclose)
garchdat <- RTL::garch(garchdat)

```


```{r}
library(tidyverse)
library(patchwork)


monthcor <- tidyquant::tq_get(
  c('ETC-USD', 'BTC-USD'),
  get = 'stock.prices',
  from = '2009-01-01'
) %>% 
  dplyr::select(date, symbol, close) %>% 
  dplyr::group_by(symbol) %>% 
  dplyr::mutate(r = log(close / lag(close))) %>% 
  tidyr::pivot_wider(id_cols = date, names_from = symbol, values_from = r) %>% 
  tidyr::drop_na() %>% 
  dplyr::mutate(
    cor30 = slider::slide2_dbl(
      .x = `ETC-USD`,
      .y = `BTC-USD`,
      .f = ~cor(.x, .y),
      .before = 30
      
    )
  ) %>%
  ggplot(aes(x = date, y = cor30)) + geom_line()

path <- tidyquant::tq_get(
  c('ETC-USD', 'BTC-USD'),
  get = 'stock.prices',
  from = '2009-01-01'
) %>% 
  dplyr::select(date, symbol, close) %>% 
  group_by(symbol) %>%
  mutate(scaled_close = scale(close)[,1]) %>%  # Extract column from scale()
  ungroup() %>% 
  dplyr::filter(date >= '2014-09-18') %>% 
  ggplot(aes(x = date, y = scaled_close, col = symbol)) + geom_line()


path / monthcor


```


```{r, Single Coin Relationship plot Function}

plot.ZeroInterceptBeta <- function(coinString, startdate, window, output){
  
          abriv <- stringr::str_split_i(coinString, '-', 1)
          abriv_r <- paste0(abriv, "_r")
          vol_abriv <- paste0("vol_", abriv)
          cum_abriv <- paste0("cum_", abriv)
          
          wide <- tidyquant::tq_get(
            c(coinString, 'BTC-USD'),
            get = 'stock.prices',
            from = startdate
          ) %>% 
            dplyr::select(date, symbol, close) %>% 
            tidyr::pivot_wider(id_cols = date, names_from = symbol, values_from = close) %>% 
            dplyr::rename_with(., .fn = ~stringr::str_replace_all(., '-USD', ''))
          
          
          
          zeroint <- wide %>%
            dplyr::mutate(
              !!abriv_r := log(!!sym(abriv) / lag(!!sym(abriv))),
              BTC_r = log(BTC / lag(BTC))
              ) %>%
              tidyr::drop_na() %>% 
            dplyr::select(date, contains('_r')) %>%
            dplyr::mutate(
              vol_BTC = slider::slide_dbl(
                .x = BTC_r,
                .f = sd,
                .before = window,
                .complete = TRUE
              ) * sqrt(252),
              !!vol_abriv := slider::slide_dbl(
                .x = !!sym(abriv_r),
                .f = sd,
                .before = window,
                .complete = TRUE
              ) * sqrt(252),
              ratio = !!sym(vol_abriv) / vol_BTC,
              correlation = slider::slide2_dbl(
                .x = BTC_r,
                .y = !!sym(abriv_r),
                .f = cor,
                .before = window
              ),
              beta = correlation * ratio
            ) %>%
            tidyr::drop_na() %>%
            dplyr::mutate(
              cum_BTC = exp(cumsum(BTC_r)) - 1,
              !!cum_abriv := exp(cumsum(!!sym(abriv_r))) -1
            )


          p1 <- zeroint %>%
            tidyr::pivot_longer(-date, names_to = 'series', values_to = 'value') %>%
            dplyr::filter(grepl('ratio|beta|correlation', series)) %>%
            plotly::plot_ly(
              x = ~date,
              y = ~value,
              color = ~series,
              colors = c("black", "gray", "darkgray"),
              type = 'scatter',
              mode = 'lines'
              ) %>%
            plotly::layout(
              yaxis = list(title = ''),
              xaxis = list(title = '')
            )

          p2 <- zeroint %>%
            tidyr::pivot_longer(-date, names_to = 'series', values_to = 'value') %>%
            dplyr::filter(grepl('vol', series)) %>%
            plotly::plot_ly(
              x = ~date,
              y = ~value,
              color = ~series,
              colors = c('gray', 'black'),
              type = 'scatter',
              mode = 'lines'
              ) %>%
            plotly::layout(
              yaxis = list(title = ''),
              xaxis = list(title = '')
            )

          p3 <- plotly::subplot(p1, p2, nrows = 2, heights = c(.8, .2)) %>%
            plotly::layout(
              legend = list(
                title=list(text='<b> Series </b>'),
                orientation = 'h',
                x = .5
                )
              )

          p4 <- zeroint %>%
            dplyr::select(contains('_r')) %>%
            plotly::plot_ly(
              x = ~BTC_r,
              y = ~.data[[abriv_r]],
              type = 'scatter',
              mode = 'markers',
              name = 'Log Return Relationship',
              marker = list(color = 'black'),
              showlegend = F
              ) %>%
            plotly::layout(
              yaxis = list(title = paste0(abriv, ' log ret')),
              xaxis = list(title = 'BTC log ret')
            )
          
          p5 <- zeroint %>%
            dplyr::select(date, dplyr::contains('cum')) %>% 
            tidyr::pivot_longer(-date, names_to = 'series', values_to = 'value') %>% 
            plotly::plot_ly(
              x = ~date, 
              y = ~value,
              color = ~series,
              colors = c('gray', 'black'),
              type = 'scatter',
              mode = 'lines'
            ) %>% 
            plotly::layout(
              yaxis = list(tickformat = '.0%', title = ''),
              xaxis = list(title = '')
            )
          
          
          annotations = list(
            
            list(
              x = 0.05,
              y = .98,
              text = paste0(abriv, ' vs BTC - Log Ret'),
              xref = 'paper',
              yref = 'paper',
              xanchor = 'center', 
              yanchor = 'bottom',
              showarrow = F
              
            ),
            list(
              x = 0.8,
              y = .98,
              text = paste0(abriv, ' vs BTC - Cummulative Log Ret'),
              xref = 'paper',
              yref = 'paper',
              xanchor = 'center', 
              yanchor = 'bottom',
              showarrow = F
            ),
            list(
              x = 0.05,
              y = .45,
              text = paste0(abriv, ' Zero Intercept Beta'),
              xref = 'paper',
              yref = 'paper',
              xanchor = 'center', 
              yanchor = 'bottom',
              showarrow = F
            )
            
          )

          chart <- plotly::subplot(p4, p3, nrows = 2, margin = 0.05) %>%
            plotly::subplot(., p5, nrows = 1, margin = 0.02) %>% 
            plotly::layout(
              title = list(text = paste0('Log Return Relationship/Zero Intercept Beta ', abriv, '/BTC', ' <br>', 'From - ', min(zeroint$date))),
              legend = list(orientation = 'h'),
              annotations = annotations
            )
          
          if(output == 'data'){
            
            return(zeroint)
            
          }else{

            return(chart)
          }
        }
```

```{r Example Use}

# for Chart make last Arg 'chart'
# for data make last Arg 'data'

plot.ZeroInterceptBeta('ETC-USD', '2010-01-01', 30, 'chart') 
plot.ZeroInterceptBeta('ETC-USD', '2010-01-01', 30, 'data') 

```

 
```{r}
# install.packages('crypto2')

library(crypto2)

crypto2::crypto_list() %>% 
  dplyr::filter(is_active == 1)


```

