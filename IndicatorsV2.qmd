---
title: "Indicators_v2"
format: html
editor: visual
---

# Potential Indicators

| Metric Name | Display Name | Category | Why It Matters |
|-----------------|-----------------|-----------------|-----------------------|
| AdrActCnt | Active Addr Cnt | Addresses | Measures user adoption; rising activity suggests increasing demand and usage. |
| TxTfrValAdjUSD | Xfer'd Val, Adj (USD) | Transactions | Captures meaningful on-chain value transfer; indicates real economic activity. |
| CapMVRVCur | MVRV (Market Cap / Realized Cap) | Market | Helps identify undervalued (\<1) or overvalued (\>3) conditions. |
| NVTAdj | NVT | Economics | Crypto’s P/E ratio; high = overvalued, low = undervalued, price signals. |
| SplyAct1yr | 1 Year Active Supply | Supply | High active supply = greater utility/liquidity; shows coin movement. |
| FlowInExUSD | Exchange Deposits (USD) | Exchange | High inflow = sell pressure; useful for spotting potential short-term dips. |
| FlowOutExUSD | Exchange Withdrawals (USD) | Exchange | High outflow = accumulation; often precedes upward price movement. |
| CapRealUSD | Realized Market Cap (USD) | Market | Helps understand market cost basis; compare to cap for investor sentiment. |
| ROI30d / ROI1yr | ROI, 30 Days / 1 Year | Market | Shows performance momentum; useful for trend continuation analysis. |
| SplyCur | Current Supply | Supply | Needed to evaluate scarcity; combine with inflation metrics. |
| IssContPctAnn | Annual Inflation Rate | Supply | Annual inflation impacts tokenomics; lower inflation = more bullish. |
| HashRate / DiffMean | Mean Hash Rate / Mean Difficulty | Mining | Indicates miner confidence and network security; often bullish. |

## **Extracting Data and Metrics:**

```{r, data_fundamental}
library(coinmetrics)
library(tidyverse)
library(lubridate)
library(httr)
library(jsonlite)
library(car)
library(crypto2)

# Define date range
start_date <- "20130429"
end_date <- format(Sys.Date(), "%Y%m%d")

# Pull daily global market data
global_crypto_data <- crypto_global_quotes(
  which = "historical",
  start_date = start_date,
  end_date = end_date,
  interval = "daily",
  quote = TRUE,         # get full price/market data
  convert = "USD",
  requestLimit = 2200,  # max limit
  sleep = 1             # give it breathing room to avoid throttling
)

btc_dom_data <- global_crypto_data %>% 
  mutate(time = as.Date(timestamp)) %>%
  dplyr::select(time, btc_dominance)


# Define your metric list for BTC
btc_metrics <- c(
  # ==== NETWORK ACTIVITY ====
  "AdrActCnt",              # Active addresses count — Fundamental
  "TxCnt",                  # Total number of transactions per day — Fundamental
  "TxTfrValAdjUSD",         # Adjusted transfer volume in USD — Fundamental
  "SplyAct1yr",             # Supply active in the past 1 year — Fundamental
  "SplyAct180d",            # Supply active in past 180 days — Fundamental
  "SplyAdrBalNtv1K",        # Addresses holding ≥ 1,000 BTC — Fundamental

  # ==== SUPPLY & DISTRIBUTION ====
  "SplyCur",                # Current supply in circulation — Fundamental
  "SplyFF",                 # Free float supply — Fundamental
  "IssContPctAnn",          # Annual inflation rate (new issuance %) — Fundamental
  "SER",                    # Supply Equality Ratio — Fundamental

  # ==== EXCHANGE FLOWS ====
  "FlowInExUSD",            # USD inflow into exchanges (deposits) — Behavioral
  "FlowOutExUSD",           # USD outflow from exchanges (withdrawals) — Behavioral

  # ==== MINING & FEES ====
  "HashRate",               # Mean network hash rate — Fundamental
  "DiffMean",               # Average difficulty (mining) — Fundamental
  "RevUSD",                 # Miner revenue in USD — Fundamental
  "FeeTotUSD",              # Total network transaction fees in USD — Fundamental
  "FeeMeanUSD",             # Average transaction fee (USD) — Fundamental

  # ==== MARKET PERFORMANCE ====
  "PriceUSD",               # BTC price in USD — Market

  # ==== OTHER ECONOMIC METRICS ====
  "VelCur1yr"              # Velocity = Tx Volume / Supply (1 Year) — Valuation/Economic

)


# Pull CoinMetrics data
df <- get_asset_metrics(
  assets = "btc",
  metrics = btc_metrics,
  start_time = "2013-04-29",
  frequency = "1d"
)

df_clean_full <- df %>%
  left_join(btc_dom_data, by = "time")

# Clean and process BTC data (main 2014 dataset onward)
df_clean_full <- df_clean_full %>%
  arrange(time) %>%
  mutate(
    daily_return = (PriceUSD / lag(PriceUSD) - 1) * 100,
    monthly_returns_forward = ((lead(PriceUSD, 30) - PriceUSD) / PriceUSD) * 100,
    date = as.Date(time)
  ) %>%
  drop_na(daily_return) %>%
  dplyr::select(-time) %>%
  dplyr::select(date, asset, PriceUSD, daily_return, monthly_returns_forward, btc_dominance, everything())


# --- Get Fear and Greed Index ---
url <- "https://api.alternative.me/fng/?limit=0&format=json"
fng_data <- fromJSON(content(GET(url), "text", encoding = "UTF-8"))

fng <- fng_data$data %>%
  as_tibble() %>% dplyr::select(timestamp, value, value_classification)

fng <- fng %>%
  mutate(date = as.Date(as.POSIXct(as.numeric(fng$timestamp), origin = "1970-01-01", tz = "UTC")),
         fng_value = as.numeric(value),
         fng_class = value_classification)

fng <- fng %>% dplyr::select(-timestamp, -value, -value_classification) %>% arrange(date) 

# Merge into CoinMetrics data
df_with_fng <- df_clean_full %>%
  left_join(fng, by = "date") %>%
  drop_na() %>%
  dplyr::select(date, asset, PriceUSD, daily_return, monthly_returns_forward, fng_value, fng_class, everything())

```

## **Final Model Variables Potentially:**

| Type | Variable | Meaning |
|------------------|------------------------|------------------------------|
| Network Activity | AdrActCnt, TxCnt, TxTfrValAdjUSD | Daily on-chain usage and volume |
| Mining & Revenue | RevUSD, FeeTotUSD | Miner revenue and fee dynamics |
| Velocity | VelCur1yr | Turnover of supply over a year |
| Behavioral | fng_value | Fear & Greed Index |
| Dominance | btc_dominance | Market cap dominance of BTC |
| Supply Concentration | SplyAdrBalNtv1K, SplyFF, SplyAct180d | Whale wallets, free float, and recent supply activity |

```{r, technical_indicators}
library(coinmetrics)
library(tidyverse)
library(zoo)
library(plotly)

technical_indicators <- c("SplyMiner0HopAllUSD", #Supply from direct block makers
               "SplyMiner1HopAllUSD", #Supply from mining pools
               "RevAllTimeUSD", #THermo Cap
               "PriceUSD", # Price in usd
               "RevUSD", #Revenue from mining
               "CapRealUSD", #Realized Market Cap
               "RevNtv", #RevNtv = Miner Revenue (the sum of funds sent to miners over a time window and is calculated as RevNtv)
               "NVTAdjFF", # NetWork Value to Transactions Free Float
               "TxTfrValAdjUSD", #Adjusted Transfer Value
               "CapMVRVFF",#The Ratio of the sum USD Value of the current supply to the sum of realized USD value of current supply (CapMkrtFFUSD / CapRealUSD)
               ) 
miner_outflows <- c("FlowMinerOut1HopAllUSD")

df <- get_asset_metrics(
  assets = "btc",
  metrics = technical_indicators,
  frequency = "1d",
  start_time = "2011-01-01"
)

df <- df %>%
  mutate(
    miner_cap = SplyMiner0HopAllUSD + SplyMiner1HopAllUSD,
    miner_balance_lag = lag(miner_cap),
    miner_outflow_est = miner_balance_lag + RevNtv - miner_cap,
    momr = miner_outflow_est / RevNtv, #Money Out Money Received
    mctc = miner_cap / RevAllTimeUSD, #Miner cap to Thermo Cap
    mcmr = miner_cap / CapRealUSD, #Miner cap to Relative Cap
    puell_multiple = RevUSD / rollmean(RevUSD, k = 365, fill = NA, align = "right"), #Market cycles for miners
    rctc = CapRealUSD / RevAllTimeUSD, #Realized cap to Thermo Cap
    rvt = CapRealUSD / TxTfrValAdjUSD, #Essentially a P/E Ratio for BTC
    rvtadj90 = CapRealUSD / rollmean(TxTfrValAdjUSD, k = 90, fill = NA, align = "right") #Realized value to Transaction Ratio
  )

scaled_df <- df %>% drop_na() %>%
  mutate(price_log = log(PriceUSD),
         price_scaled_mult = scales::rescale(price_log, to = c(0, 1)),
         mctc_scaled_mult = scales::rescale(mctc, to = c(0, 1)),
         mcmr_scaled_mult = scales::rescale(mcmr, to = c(0, 1)),
         puell_scaled = scales::rescale(puell_multiple, to = c(0,1)),
         momr_scaled_mult = scales::rescale(momr, to = c(0,1)),
         rctc_scaled_mult = scales::rescale(rctc, to = c(0,1)),
         NVTAdjFF_scaled = scales::rescale(NVTAdjFF, to = c(0,1)),
         rvt_scaled = scales::rescale(rvt, to = c(0,1)),
         rvtadj90_scaled = scales::rescale(rvtadj90, to = c(0,1)),
         mvrv_scaled = scales::rescale(CapMVRVFF, to = c(0,1))
         )


```

```{r, relationship_technical}
bit <- tidyquant::tq_get(
  'BTC-USD',
  get = 'stock.prices',
  from = '2014-09-17'
) %>% 
  tidyr::drop_na()

rets <- bit %>% 
  dplyr::mutate(
    intraday = log(close / open),
    closeclose = log(close / lag(close)),
    overnight = log(open / lag(close))
  ) %>% 
  tidyr::drop_na()

indicators <- df %>% 
  dplyr::mutate(date = as.Date(time)) %>% 
  dplyr::select(date, everything()) %>% 
  dplyr::select(-c(asset, time)) %>% 
  tidyr::pivot_longer(-date, names_to = 'series', values_to = 'value') %>% 
  dplyr::group_by(series) %>% 
  dplyr::mutate(change = log(value / lag(value))) %>% 
  tidyr::pivot_wider(id_cols = date, names_from = series, values_from = change) %>% 
  tidyr::drop_na() %>% 
  dplyr::select(!contains('_scaled'))


eda <- rets %>% 
  dplyr::left_join(indicators) %>% 
  tidyr::drop_na() %>% 
  dplyr::select(-c(symbol, open, high, low, close, volume, adjusted, intraday, overnight))


genxy <- function(df, targetexplan, lag){
  
  output <- list()
  
  for(name in names(df)){
    if(name == 'date' | name == targetexplan){
      next
    }else{
      
      p <- df %>% 
        dplyr::select(!!sym(targetexplan), !!sym(name)) %>% 
        ggplot(aes(x = lag(!!sym(name), lag), y = !!sym(targetexplan))) + geom_point()
      
      
      output[[name]] <- p
    }
  }
  
  return(output)
}
  
dat <- df %>% 
  dplyr::mutate(date = as.Date(time)) %>% 
  dplyr::select(date, mcmr) %>% 
  dplyr::mutate(distance = mcmr - 1,
                flag = ifelse(distance >=  0, TRUE, FALSE)) %>% 
  dplyr::left_join(rets) %>% 
  tidyr::drop_na() %>% 
  dplyr::select(date, close, mcmr)

p1 <- plotly::plot_ly() %>% 
  plotly::add_trace(x = ~date, y = ~mcmr, type = 'scatter', mode = 'lines', name = 'mcmr', data = dat)

p2 <- plotly::plot_ly() %>% 
  plotly::add_trace(x = ~date, y = ~close, type = 'scatter', mode = 'lines', name = 'close', data = dat)


plotly::subplot(p2, p1, nrows = 2, shareX = T, shareY = FALSE)





  


```

```{r}
library(tidyquant)
df_usdi <- tq_get(
  "DX-Y.NYB",
  get = "stock.prices",
  from = "2011-01-01"
) %>% select(date, adjusted) %>%
  mutate(dollar_index = adjusted) %>%
  select(-adjusted)

df_econ <- tq_get(
  c("GS10", "CPIAUCSL", "M2SL", "FEDFUNDS"),
  get = "economic.data",
  from = "2011-01-01"
)


```
