---
title: "Indicators_v2"
format: html
editor: visual
---

# Potential Indicators

| Metric Name | Display Name | Category | Why It Matters |
|---------------|---------------|---------------|-----------------------------|
| AdrActCnt | Active Addr Cnt | Addresses | Measures user adoption; rising activity suggests increasing demand and usage. |
| TxTfrValAdjUSD | Xfer'd Val, Adj (USD) | Transactions | Captures meaningful on-chain value transfer; indicates real economic activity. |
| CapMVRVCur | MVRV (Market Cap / Realized Cap) | Market | Helps identify undervalued (\<1) or overvalued (\>3) conditions. |
| NVTAdj | NVT | Economics | Crypto’s P/E ratio; high = overvalued, low = undervalued, price signals. |
| SplyAct1yr | 1 Year Active Supply | Supply | High active supply = greater utility/liquidity; shows coin movement. |
| FlowInExUSD | Exchange Deposits (USD) | Exchange | High inflow = sell pressure; useful for spotting potential short-term dips. |
| FlowOutExUSD | Exchange Withdrawals (USD) | Exchange | High outflow = accumulation; often precedes upward price movement. |
| CapRealUSD | Realized Market Cap (USD) | Market | Helps understand market cost basis; compare to cap for investor sentiment. |
| ROI30d / ROI1yr | ROI, 30 Days / 1 Year | Market | Shows performance momentum; useful for trend continuation analysis. |
| SplyCur | Current Supply | Supply | Needed to evaluate scarcity; combine with inflation metrics. |
| IssContPctAnn | Annual Inflation Rate | Supply | Annual inflation impacts tokenomics; lower inflation = more bullish. |
| HashRate / DiffMean | Mean Hash Rate / Mean Difficulty | Mining | Indicates miner confidence and network security; often bullish. |

## **Extracting Data and Metrics:**

```{r, data_setup_and_metrics}
library(coinmetrics)
library(tidyverse)
library(lubridate)
library(httr)
library(jsonlite)
library(car)
library(crypto2)

# Define date range
start_date <- "20130429"
end_date <- format(Sys.Date(), "%Y%m%d")

# Pull daily global market data
global_crypto_data <- crypto_global_quotes(
  which = "historical",
  start_date = start_date,
  end_date = end_date,
  interval = "daily",
  quote = TRUE,         # get full price/market data
  convert = "USD",
  requestLimit = 2200,  # max limit
  sleep = 1             # give it breathing room to avoid throttling
)

btc_dom_data <- global_crypto_data %>% 
  mutate(time = as.Date(timestamp)) %>%
  dplyr::select(time, btc_dominance)


# Define your metric list for BTC
btc_metrics <- c(
  # ==== NETWORK ACTIVITY ====
  "AdrActCnt",              # Active addresses count — Fundamental
  "TxCnt",                  # Total number of transactions per day — Fundamental
  "TxTfrValAdjUSD",         # Adjusted transfer volume in USD — Fundamental
  "SplyAct1yr",             # Supply active in the past 1 year — Fundamental
  "SplyAct180d",            # Supply active in past 180 days — Fundamental
  "SplyAdrBalNtv1K",        # Addresses holding ≥ 1,000 BTC — Fundamental

  # ==== SUPPLY & DISTRIBUTION ====
  "SplyCur",                # Current supply in circulation — Fundamental
  "SplyFF",                 # Free float supply — Fundamental
  "IssContPctAnn",          # Annual inflation rate (new issuance %) — Fundamental
  "SER",                    # Supply Equality Ratio — Fundamental

  # ==== EXCHANGE FLOWS ====
  "FlowInExUSD",            # USD inflow into exchanges (deposits) — Behavioral
  "FlowOutExUSD",           # USD outflow from exchanges (withdrawals) — Behavioral

  # ==== VALUATION METRICS ====
  "CapMVRVCur",             # MVRV (Market Cap / Realized Cap) — Valuation
  "NVTAdj",                 # NVT (adj. Network Value / Tx Volume) — Valuation
  "NVTAdj90",               # 90d Moving Avg of NVT — Valuation
  "CapRealUSD",             # Realized Cap in USD — Valuation
  "CapMrktCurUSD",          # Market Cap using current supply — Valuation

  # ==== MINING & FEES ====
  "HashRate",               # Mean network hash rate — Fundamental
  "DiffMean",               # Average difficulty (mining) — Fundamental
  "RevUSD",                 # Miner revenue in USD — Fundamental
  "FeeTotUSD",              # Total network transaction fees in USD — Fundamental
  "FeeMeanUSD",             # Average transaction fee (USD) — Fundamental

  # ==== MARKET PERFORMANCE ====
  "PriceUSD",               # BTC price in USD — Market
  "ROI30d",                 # Return on investment over 30 days — Market
  "ROI1yr",                 # Return on investment over 1 year — Market

  # ==== OTHER ECONOMIC METRICS ====
  "VelCur1yr"              # Velocity = Tx Volume / Supply (1 Year) — Valuation/Economic

)


# Pull CoinMetrics data
df <- get_asset_metrics(
  assets = "btc",
  metrics = btc_metrics,
  start_time = "2013-04-29",
  frequency = "1d"
)

df_clean_full <- df %>%
  left_join(btc_dom_data, by = "time")

# Clean and process BTC data (main 2014 dataset onward)
df_clean_full <- df_clean_full %>%
  arrange(time) %>%
  mutate(
    daily_return = (PriceUSD / lag(PriceUSD) - 1) * 100,
    monthly_returns = ((lead(PriceUSD, 30) - PriceUSD) / PriceUSD) * 100,
    date = as.Date(time)
  ) %>%
  drop_na(daily_return) %>%
  dplyr::select(-time) %>%
  dplyr::select(date, asset, PriceUSD, daily_return, ROI30d, btc_dominance, everything())


# --- Get Fear and Greed Index ---
url <- "https://api.alternative.me/fng/?limit=0&format=json"
fng_data <- fromJSON(content(GET(url), "text", encoding = "UTF-8"))

fng <- fng_data$data %>%
  as_tibble() %>% dplyr::select(timestamp, value, value_classification)

fng <- fng %>%
  mutate(date = as.Date(as.POSIXct(as.numeric(fng$timestamp), origin = "1970-01-01", tz = "UTC")),
         fng_value = as.numeric(value),
         fng_class = value_classification)

fng <- fng %>% dplyr::select(-timestamp, -value, -value_classification) %>% arrange(date) 

# Merge into CoinMetrics data
df_with_fng <- df_clean_full %>%
  left_join(fng, by = "date") %>%
  drop_na() %>%
  dplyr::select(date, asset, PriceUSD, daily_return, ROI30d, fng_value, fng_class, everything())

```

```{r, Converting_to_long_df}

df_long <- df_clean_full %>% select(-asset, -`FlowInExUSD-status`, -`FlowInExUSD-status-time`, -`FlowOutExUSD-status`, -`FlowOutExUSD-status-time`) %>%
  mutate(PriceUSD_Scaled = scales::rescale(PriceUSD, to = range(CapMVRVCur))) %>%
  pivot_longer(-date, names_to = "metric", values_to = "value")


```

```{r}

df_long_subset <- df_long %>%
  filter(metric %in% c("PriceUSD", "AdrActCnt", "TxCnt", "TxTfrValAdjUSD", "RevUSD", "FeeTotUSD", "VelCur1yr", "btc_dominance", "SplyAdrBalNtv1K", "SplyFF", "SplyAct180d"))

df_long_subset %>% ggplot(aes(x = date, y = value, col = metric)) + geom_line() +
  facet_wrap(metric ~ ., scales = "free_y") + theme(legend.position = "none")
```

```{r}
plotted_metrics <- c("AdrActCnt", "TxCnt", "TxTfrValAdjUSD", "RevUSD", "FeeTotUSD", "VelCur1yr", "btc_dominance", "SplyAdrBalNtv1K", "SplyFF", "SplyAct180d")

df_long_remaining <- df_long %>%
  filter(!(metric %in% plotted_metrics))

df_long_remaining %>%
  ggplot(aes(x = date, y = value, col = metric)) +
  geom_line() + 
  facet_wrap(metric ~ ., scales = "free_y") +
  theme(legend.position = "none")

```

## **Final Model Variables Potentially:**

| Type | Variable | Meaning |
|-----------------|------------------------|-------------------------------|
| Network Activity | AdrActCnt, TxCnt, TxTfrValAdjUSD | Daily on-chain usage and volume |
| Mining & Revenue | RevUSD, FeeTotUSD | Miner revenue and fee dynamics |
| Velocity | VelCur1yr | Turnover of supply over a year |
| Behavioral | fng_value | Fear & Greed Index |
| Dominance | btc_dominance | Market cap dominance of BTC |
| Supply Concentration | SplyAdrBalNtv1K, SplyFF, SplyAct180d | Whale wallets, free float, and recent supply activity |

```{r}

df_long %>% filter(metric %in% c("CapMVRVCur", "PriceUSD_Scaled")) %>%
  ggplot(aes(x = date, y = value, col = metric)) + geom_line()
```

```{r}

df_long %>% filter(metric %in% c("CapMVRVCur", "PriceUSD")) %>%
  ggplot(aes(x = date, y = value, col = metric)) + geom_line() +
  facet_wrap(. ~ metric, scale = "free_y")
```

```{r}

miner_cap <- c("SplyMiner0HopAllUSD",
               "SplyMiner1HopAllUSD",
               "RevAllTimeUSD",
               "PriceUSD",
               "RevUSD",
               "CapRealUSD",
               "RevNtv") #RevNtv = Miner Revenue (the sum of funds sent to miners over a time window and is calculated as RevNtv)
miner_outflows <- c("FlowMinerOut1HopAllNtv")

df <- get_asset_metrics(
  assets = "btc",
  metrics = miner_cap,
  frequency = "1d",
  start_time = "2011-01-01"
)

df <- df %>%
  mutate(
    miner_cap = SplyMiner0HopAllUSD + SplyMiner1HopAllUSD,
    miner_balance_lag = lag(miner_cap),
    miner_outflow_est = miner_balance_lag + RevNtv - miner_cap,
    momr = miner_outflow_est / RevNtv,
    mctc = miner_cap / RevAllTimeUSD,
    mcmr = miner_cap / CapRealUSD,
    puell_multiple = RevUSD / rollmean(RevUSD, k = 365, fill = NA, align = "right")
  )

df <- df %>% drop_na() %>%
  mutate(price_log = log(PriceUSD),
         price_scaled_mult = scales::rescale(price_log, to = c(0, 1)),
         mctc_scaled_mult = scales::rescale(mctc, to = c(0, 1)),
         mcmr_scaled_mult = scales::rescale(mcmr, to = c(0, 1)),
         puell_scaled = scales::rescale(puell_multiple, to = c(0,1)),
         momr_scaled_mult = scales::rescale(mcmr, to = c(0,1))
         )




metrics_chart <- df %>% ggplot(aes(x = time)) +
  geom_line(aes(y = price_scaled_mult, col = "Log Price"), size = 0.6) +
  geom_line(aes(y = mctc_scaled_mult, col = "MCTC"), size = 0.3, alpha = 0.4) +
  geom_line(aes(y = puell_scaled, col = "PM"), size = 0.3, alpha = 0.5) +
  geom_line(aes(y = mcmr_scaled_mult, col = "MCMR"), size = 0.3, alpha = 0.2) +
  geom_line(aes(y = momr_scaled_mult, col = "MOMR"), size = 0.3, alpha = 0.3)

ggplotly(metrics_chart)
```

\
200

Time series of metrics for an asset.

400

Asset not found.

401

Requested resource requires authorization.

403

Requested resource is not available with supplied credentials.

414

Provided URI is too long. It must not be greater than 10000 symbols.
